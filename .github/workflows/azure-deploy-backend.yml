name: deploy-backend-azure

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  BACKEND_PATH: obsidian-n-a/backend

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Ensure Resource Group
        uses: azure/cli@v2
        with:
          inlineScript: |
            az group create -n "${{ vars.AZURE_RG }}" -l "${{ vars.AZURE_LOCATION }}"

      - name: Deploy infrastructure (Bicep)
        uses: azure/cli@v2
        with:
          inlineScript: |
            az deployment group create \
              --resource-group "${{ vars.AZURE_RG }}" \
              --template-file "$GITHUB_WORKSPACE/${{ env.BACKEND_PATH }}/deploy.bicep" \
              --parameters appName="${{ vars.AZURE_APP_NAME }}" location="${{ vars.AZURE_LOCATION }}" sku=B1 pythonVersion=3.11

      - name: Build backend package (zip)
        shell: bash
        run: |
          set -euo pipefail
          cd "$GITHUB_WORKSPACE/${{ env.BACKEND_PATH }}"
          # Clean previous artifact
          rm -f app.zip || true
          # Include app source and requirements
          zip -r app.zip src requirements.txt requirements config -x "**/__pycache__/*"
          ls -lh app.zip

      - name: Configure app settings from .env.production (if present)
        if: ${{ hashFiles(format('{0}/.env.production', env.BACKEND_PATH)) != '' }}
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            APP_NAME="${{ vars.AZURE_APP_NAME }}"
            RG="${{ vars.AZURE_RG }}"
            ENV_FILE="$GITHUB_WORKSPACE/${{ env.BACKEND_PATH }}/.env.production"
            # Base settings helpful for Python builds
            az webapp config appsettings set --name "$APP_NAME" --resource-group "$RG" --settings \
              SCM_DO_BUILD_DURING_DEPLOYMENT=true \
              PYTHON_ENABLE_GUNICORN=1 \
              ENVIRONMENT=production
            # Apply key=value lines from .env.production
            while IFS= read -r line || [ -n "$line" ]; do
              # Skip comments and empty lines
              if [ -z "$line" ] || [[ "$line" =~ ^# ]]; then continue; fi
              key="${line%%=*}"
              value="${line#*=}"
              # Trim spaces
              key="$(echo "$key" | xargs)"
              value="$(echo "$value" | xargs)"
              if [ -n "$key" ]; then
                az webapp config appsettings set --name "$APP_NAME" --resource-group "$RG" --settings "$key=$value" >/dev/null
              fi
            done < "$ENV_FILE"

      - name: Ensure startup command
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp config set \
              --resource-group "${{ vars.AZURE_RG }}" \
              --name "${{ vars.AZURE_APP_NAME }}" \
              --startup-file "python -m src.main"

      - name: Deploy zip to App Service
        uses: azure/cli@v2
        with:
          inlineScript: |
            az webapp deploy \
              --resource-group "${{ vars.AZURE_RG }}" \
              --name "${{ vars.AZURE_APP_NAME }}" \
              --src-path "$GITHUB_WORKSPACE/${{ env.BACKEND_PATH }}/app.zip" \
              --type zip

      - name: Show site URL
        uses: azure/cli@v2
        with:
          inlineScript: |
            HOST=$(az webapp show --name "${{ vars.AZURE_APP_NAME }}" --resource-group "${{ vars.AZURE_RG }}" --query defaultHostName -o tsv)
            echo "App URL: https://$HOST"
