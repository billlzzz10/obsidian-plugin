"use strict";var u=Object.defineProperty;var c=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var D=(a,t)=>{for(var l in t)u(a,l,{get:t[l],enumerable:!0})},A=(a,t,l,g)=>{if(t&&typeof t=="object"||typeof t=="function")for(let e of m(t))!y.call(a,e)&&e!==l&&u(a,e,{get:()=>t[e],enumerable:!(g=c(t,e))||g.enumerable});return a};var w=a=>A(u({},"__esModule",{value:!0}),a);var T={};D(T,{default:()=>r});module.exports=w(T);var p=require("obsidian");var i=require("obsidian"),o=class extends i.PluginSettingTab{constructor(t,l){super(t,l),this.plugin=l}display(){let{containerEl:t}=this;t.empty(),t.addClass("obsidian-ai-settings-container"),t.createEl("h2",{text:"Obsidian AI Enhanced Settings",cls:"obsidian-ai-settings-title"});let l=t.createDiv({cls:"obsidian-ai-settings-section"});l.createEl("h3",{text:"AI Model Settings",cls:"obsidian-ai-settings-section-title"}),new i.Setting(l).setName("Selected Model").setDesc("Choose the AI model to use for chat").addDropdown(e=>{e.addOption("gpt-4","OpenAI: GPT-4"),e.addOption("gpt-3.5-turbo","OpenAI: GPT-3.5 Turbo"),e.addOption("azure-gpt-4","Azure: GPT-4 (Azure)"),e.addOption("azure-gpt-35","Azure: GPT-3.5 (Azure)"),e.addOption("gemini-pro","Google: Gemini Pro"),e.setValue(this.plugin.settings.selectedModel||"gpt-4").onChange(async s=>{this.plugin.settings.selectedModel=s,await this.plugin.saveData(this.plugin.settings)})}),new i.Setting(t).setName("OpenAI API Key").setDesc("Your OpenAI API key (starts with sk-)").addText(e=>e.setPlaceholder("sk-...").setValue(this.plugin.settings.openaiApiKey||"").onChange(async s=>{this.plugin.settings.openaiApiKey=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Azure OpenAI API Key").setDesc("Your Azure OpenAI API key").addText(e=>e.setPlaceholder("...").setValue(this.plugin.settings.azureApiKey||"").onChange(async s=>{this.plugin.settings.azureApiKey=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Azure Endpoint").setDesc("Azure OpenAI endpoint URL").addText(e=>e.setPlaceholder("https://...").setValue(this.plugin.settings.azureEndpoint||"").onChange(async s=>{this.plugin.settings.azureEndpoint=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Azure Region").setDesc("Azure region (e.g., eastus)").addText(e=>e.setPlaceholder("eastus").setValue(this.plugin.settings.azureRegion||"").onChange(async s=>{this.plugin.settings.azureRegion=s,await this.plugin.saveData(this.plugin.settings)}));let g=t.createDiv({cls:"obsidian-ai-settings-section"});g.createEl("h3",{text:"Embedding & RAG Settings",cls:"obsidian-ai-settings-section-title"}),new i.Setting(g).setName("Embedding Model").setDesc("Choose the embedding model for RAG").addDropdown(e=>{e.addOption("all-MiniLM-L6-v2","all-MiniLM-L6-v2"),e.addOption("azure-embedding","Azure Embedding"),e.setValue(this.plugin.settings.embeddingModel||"all-MiniLM-L6-v2").onChange(async s=>{this.plugin.settings.embeddingModel=s,await this.plugin.saveData(this.plugin.settings)})}),new i.Setting(t).setName("Chunk Size").setDesc("Size of text chunks for embedding (100-2000 characters)").addSlider(e=>e.setLimits(100,2e3,100).setValue(this.plugin.settings.chunkSize||500).setDynamicTooltip().onChange(async s=>{this.plugin.settings.chunkSize=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Chunk Overlap").setDesc("Overlap between chunks (0-500 characters)").addSlider(e=>e.setLimits(0,500,50).setValue(this.plugin.settings.chunkOverlap||100).setDynamicTooltip().onChange(async s=>{this.plugin.settings.chunkOverlap=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Max Retrieved Chunks").setDesc("Maximum number of chunks to retrieve for context").addSlider(e=>e.setLimits(1,20,1).setValue(this.plugin.settings.maxRetrievedChunks||5).setDynamicTooltip().onChange(async s=>{this.plugin.settings.maxRetrievedChunks=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Similarity Threshold").setDesc("Minimum similarity score for retrieved chunks").addSlider(e=>e.setLimits(.1,1,.1).setValue(this.plugin.settings.similarityThreshold||.7).setDynamicTooltip().onChange(async s=>{this.plugin.settings.similarityThreshold=s,await this.plugin.saveData(this.plugin.settings)})),t.createEl("h3",{text:"External Integrations"}),new i.Setting(t).setName("Notion Integration Token").setDesc("Your Notion integration token").addText(e=>e.setPlaceholder("secret_...").setValue(this.plugin.settings.notionIntegrationToken||"").onChange(async s=>{this.plugin.settings.notionIntegrationToken=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Notion Database IDs").setDesc("Comma-separated list of Notion database IDs").addTextArea(e=>e.setPlaceholder("database-id-1,database-id-2").setValue((this.plugin.settings.notionDatabaseIds||[]).join(",")).onChange(async s=>{this.plugin.settings.notionDatabaseIds=s.split(",").map(n=>n.trim()).filter(n=>n),await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Airtable API Key").setDesc("Your Airtable Personal Access Token").addText(e=>e.setPlaceholder("pat...").setValue(this.plugin.settings.airtableApiKey||"").onChange(async s=>{this.plugin.settings.airtableApiKey=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Airtable Base IDs").setDesc("Comma-separated list of Airtable base IDs").addTextArea(e=>e.setPlaceholder("app...").setValue((this.plugin.settings.airtableBaseIds||[]).join(",")).onChange(async s=>{this.plugin.settings.airtableBaseIds=s.split(",").map(n=>n.trim()).filter(n=>n),await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Auto Sync").setDesc("Automatically sync external data at regular intervals").addToggle(e=>e.setValue(this.plugin.settings.autoSync||!1).onChange(async s=>{this.plugin.settings.autoSync=s,await this.plugin.saveData(this.plugin.settings),this.plugin.dataIngestionManager?.startAutoSync&&this.plugin.dataIngestionManager.startAutoSync()})),new i.Setting(t).setName("Sync Interval").setDesc("Interval between automatic syncs (in minutes)").addSlider(e=>e.setLimits(5,1440,5).setValue(this.plugin.settings.syncInterval||60).setDynamicTooltip().onChange(async s=>{this.plugin.settings.syncInterval=s,await this.plugin.saveData(this.plugin.settings),this.plugin.dataIngestionManager?.startAutoSync&&this.plugin.dataIngestionManager.startAutoSync()})),t.createEl("h3",{text:"Macros & Prompt Templates"}),new i.Setting(t).setName("Custom Macros").setDesc("Define custom macros (JSON array of macro definitions)").addTextArea(e=>e.setPlaceholder('[{"name":"Summarize","command":"summarize"}]').setValue(this.plugin.settings.customMacros||"").onChange(async s=>{this.plugin.settings.customMacros=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Prompt Templates").setDesc("Custom prompt templates (JSON array)").addTextArea(e=>e.setPlaceholder('[{"name":"Q&A","template":"Answer the question..."}]').setValue(this.plugin.settings.promptTemplates||"").onChange(async s=>{this.plugin.settings.promptTemplates=s,await this.plugin.saveData(this.plugin.settings)})),t.createEl("h3",{text:"MCP & Advanced Integrations"}),new i.Setting(t).setName("MCP Service Endpoints").setDesc("Comma-separated list of MCP service URLs").addTextArea(e=>e.setPlaceholder("https://mcp1.com,https://mcp2.com").setValue((this.plugin.settings.mcpServices||[]).join(",")).onChange(async s=>{this.plugin.settings.mcpServices=s.split(",").map(n=>n.trim()).filter(n=>n),await this.plugin.saveData(this.plugin.settings)})),t.createEl("h3",{text:"Chat & UI Settings"}),new i.Setting(t).setName("Max Chat History").setDesc("Maximum number of messages to keep in chat history").addSlider(e=>e.setLimits(10,100,5).setValue(this.plugin.settings.maxChatHistory||50).setDynamicTooltip().onChange(async s=>{this.plugin.settings.maxChatHistory=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Show Sources").setDesc("Show source information in chat responses").addToggle(e=>e.setValue(this.plugin.settings.showSources||!1).onChange(async s=>{this.plugin.settings.showSources=s,await this.plugin.saveData(this.plugin.settings)})),new i.Setting(t).setName("Stream Responses").setDesc("Stream AI responses as they are generated").addToggle(e=>e.setValue(this.plugin.settings.streamResponses||!1).onChange(async s=>{this.plugin.settings.streamResponses=s,await this.plugin.saveData(this.plugin.settings)})),t.createEl("h3",{text:"Actions"}),new i.Setting(t).setName("Sync External Data").setDesc("Manually sync data from Notion and Airtable").addButton(e=>e.setButtonText("Sync Now").setCta().onClick(async()=>{e.setButtonText("Syncing..."),e.setDisabled(!0);try{this.plugin.dataIngestionManager?.syncExternalData&&await this.plugin.dataIngestionManager.syncExternalData(),e.setButtonText("Sync Complete"),setTimeout(()=>{e.setButtonText("Sync Now"),e.setDisabled(!1)},2e3)}catch(s){console.error("Sync failed:",s),e.setButtonText("Sync Failed"),setTimeout(()=>{e.setButtonText("Sync Now"),e.setDisabled(!1)},2e3)}})),new i.Setting(t).setName("Rebuild Embeddings").setDesc("Rebuild all embeddings from scratch").addButton(e=>e.setButtonText("Rebuild").setWarning().onClick(async()=>{e.setButtonText("Rebuilding..."),e.setDisabled(!0);try{this.plugin.embeddingManager?.rebuildEmbeddings&&await this.plugin.embeddingManager.rebuildEmbeddings(),e.setButtonText("Rebuild Complete"),setTimeout(()=>{e.setButtonText("Rebuild"),e.setDisabled(!1)},2e3)}catch(s){console.error("Rebuild failed:",s),e.setButtonText("Rebuild Failed"),setTimeout(()=>{e.setButtonText("Rebuild"),e.setDisabled(!1)},2e3)}}))}};var d=class{async startAutoSync(){return Promise.resolve()}async syncExternalData(){return Promise.resolve()}},h=class{async rebuildEmbeddings(){return Promise.resolve()}},r=class extends p.Plugin{async onload(){this.settings=Object.assign({},await this.loadData()||{}),this.dataIngestionManager=new d,this.embeddingManager=new h,this.addSettingTab(new o(this.app,this))}async saveData(t){this.settings=t,await super.saveData(t)}};
